This code was added to this text file in order to clean up index.js

//////////////////////////////////////////
// FILES FS
// // blocking, synchronous way
// const textIn = fs.readFileSync("./txt/input.txt", "utf-8");

// console.log(textIn);

// const textOut = `A little information about avocado: ${textIn}. \nCreated by Sergio on ${Date.now()}`;
// fs.writeFileSync("./txt/output.txt", textOut);

// console.log("File Written!");

// nonblocking, asynchronous
// fs.readFile("./txt/start.txt", "utf-8", (err, data1) => {
//   fs.readFile(`./txt/${data1}.txt`, "utf-8", (err, data2) => {
//     console.log(data2);
//     fs.readFile(`./txt/append.txt`, "utf-8", (err, data3) => {
//       console.log(data3);
//       fs.writeFile("./txt/final.txt", `${data2}\n${data3}`, "utf-8", (err) => {
//         console.log("Your file has been written ");
//       });
//     });
//   });
// });

// console.log("Will read file");

/////////////////////////////////////////////////////////
// SERVER

// __dirname is the same as ./ but with temporal literal it is easier
// synchrounos code but its fine because its top level and only get ran once

// Function for replacing the placeholder in HTML Templates with the data from the JSON file
// const replaceTemplate = (temp, product) => {
//   let output = temp.replace(/{productName}/g, product.productName);
//   output = output.replace(/{image}/g, product.image);
//   output = output.replace(/{from}/g, product.from);
//   output = output.replace(/{nutrients}/g, product.nutrients);
//   output = output.replace(/{quantity}/g, product.quantity);
//   output = output.replace(/{id}/g, product.id);
//   output = output.replace(/{description}/g, product.description);
//   output = output.replace(/{price}/g, product.price);

//   if (!product.organic)
//     output = output.replace(/{not_organic}/g, "not-organic");
//   return output;
// };
